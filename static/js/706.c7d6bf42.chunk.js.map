{"version":3,"file":"static/js/706.c7d6bf42.chunk.js","mappings":"8GACA,WACIA,WAAY,GACZC,KAAM,GACNC,OAAQ","sources":["../../core/README-zh.md"],"sourcesContent":["\nexport default {\n    components: {  },\n    data: {},\n    source: \"markdown-react-code-preview-loader\\n===\\n\\n[![CI](https://github.com/kktjs/markdown-react-code-preview-loader/actions/workflows/ci.yml/badge.svg)](https://github.com/kktjs/markdown-react-code-preview-loader/actions/workflows/ci.yml)\\n[![npm version](https://img.shields.io/npm/v/markdown-react-code-preview-loader.svg)](https://www.npmjs.com/package/markdown-react-code-preview-loader)\\n[![npm unpkg](https://img.shields.io/badge/Open%20in-unpkg-blue)](https://uiwjs.github.io/npm-unpkg/#/pkg/markdown-react-code-preview-loader/file/README.md)\\n\\n索引 Markdown 中的示例文本，转换为 React 组件。当前包是 `webpack` 的 `loader`，通过配置当前 `loader` 加载 `markdown` 文档，返回一个 `JS` 对象，包含 `markdown` 文本，`markdown` 文本中的示例索引。\\n\\n## 安装 Loader\\n\\n```bash\\nnpm i markdown-react-code-preview-loader -D\\n```\\n\\n## 配置 Loader\\n\\n安装依赖(loader)之后，我们需要将 `loader` 配置到 `webpack` 配置中，通过在 `kkt` 中两种配置方法，了解如何使用配置 `loader`。\\n\\n**第 ① 种方法，使用 mdCodeModulesLoader 方法**\\n\\n`mdCodeModulesLoader` 用于在 webpack 配置添加 `markdown-react-code-preview-loader` 的方法。\\n\\n```ts\\n// .kktrc.ts\\nimport scopePluginOptions from '@kkt/scope-plugin-options';\\nimport { LoaderConfOptions, WebpackConfiguration } from 'kkt';\\nimport { mdCodeModulesLoader } from 'markdown-react-code-preview-loader';\\n\\nexport default (conf: WebpackConfiguration, env: 'development' | 'production', options: LoaderConfOptions) => {\\n  // ....\\n  conf = mdCodeModulesLoader(conf);\\n  // ....\\n  return conf;\\n};\\n```\\n\\n```ts\\nimport webpack from 'webpack';\\nimport { Options } from 'markdown-react-code-preview-loader';\\n/**\\n * 用于修改 webpack 配置 loader 的方法\\n * @param {webpack.Configuration} config webpack 配置\\n * @param {string[]} lang 解析语言\\n * @param {Options} option Loader Options\\n * @returns {webpack.Configuration}\\n * **/\\nexport declare const mdCodeModulesLoader: (config: webpack.Configuration, lang?: string[], option?: Options) => webpack.Configuration;\\n```\\n\\n**第 ② 种方法，手动添加配置**\\n\\n在 Webpack 中配置使用方法是一致的。\\n\\n```ts\\n// .kktrc.ts\\nimport webpack, { Configuration } from 'webpack';\\nimport scopePluginOptions from '@kkt/scope-plugin-options';\\nimport { LoaderConfOptions } from 'kkt';\\n\\nexport default (conf: Configuration, env: 'development' | 'production', options: LoaderConfOptions) => {\\n  // ....\\n  config.module.rules.forEach((ruleItem) => {\\n    if (typeof ruleItem === 'object') {\\n      if (ruleItem.oneOf) {\\n        ruleItem.oneOf.unshift({\\n          test: /.md$/,\\n          use: [\\n            {\\n              loader: 'markdown-react-code-preview-loader',\\n              options: { lang:[\\\"jsx\\\",\\\"tsx\\\"] },\\n            },\\n          ],\\n        });\\n      }\\n    }\\n  });\\n  // ....\\n  return conf;\\n};\\n```\\n\\n### options 参数\\n\\n```ts\\nimport { PluginItem } from '@babel/core';\\nimport { Options as RemoveImportsOptions } from 'babel-plugin-transform-remove-imports'\\nexport type Options = {\\n  /**\\n   * 需要解析代码块的语言，默认: `[\\\"jsx\\\",\\\"tsx\\\"]`\\n   */\\n  lang?: string[];\\n  /**\\n   * 删除过滤 imports 包；\\n   * babel (babel-plugin-transform-remove-imports) 包的 option 设置\\n   * https://github.com/uiwjs/babel-plugin-transform-remove-imports\\n   */\\n  removeImports?: RemoveImportsOptions;\\n  /**\\n   * 添加 babel 插件。\\n   */\\n  babelPlugins?: PluginItem[];\\n}\\n```\\n\\n## 项目中使用\\n\\n添加 `loader` 之后，在项目工程中加载 `markdown` 文本使用方法：\\n\\n```jsx\\nimport mdObj from 'markdown-react-code-preview-loader/README.md';\\n\\nmdObj.source     // => `README.md` 原始字符串文本\\nmdObj.components // => 组件索引对象，从 markdown 索引到的示例转换成的 React 组件。(可能需要配置 meta)\\nmdObj.data       // => 组件源码索引对象，从 markdown 索引到的示例源码。(可能需要配置 meta)\\n```\\n\\n```js\\n{\\n  data: {\\n    77: {\\n      code: \\\"\\\\\\\"use strict\\\\\\\";\\\\n\\\\nfunction ......\\\"\\n      language: \\\"jsx\\\"\\n      name: 77,\\n      meta: {},\\n      value: \\\"impo.....\\\"\\n    },\\n    demo12: {\\n      code: \\\"\\\\\\\"use strict\\\\\\\";\\\\n\\\\nfunction ......\\\"\\n      language: \\\"jsx\\\"\\n      name: 'demo12',\\n      meta: {},\\n      value: \\\"impo.....\\\"\\n    }\\n  },\\n  components: { 77: ƒ, demo12: ƒ },\\n  source: \\\"# Alert 确认对话框....\\\"\\n}\\n```\\n\\n```ts\\nexport type CodeBlockItem = {\\n  /** 源码转换后的代码。 **/\\n  code?: string;\\n  /** 原始代码块 **/\\n  value?: string;\\n  /** 代码块编程语言 **/\\n  language?: string;\\n  /** 索引名称可以自定义，可以是行号。 */\\n  name?: string | number;\\n  /** `meta` 参数被转换为 `object` */\\n  meta?: Record<string, string>;\\n};\\n\\nexport type CodeBlockData = {\\n  source: string;\\n  components: Record<CodeBlockItem['name'], React.FC>;\\n  data: Record<CodeBlockItem['name'], CodeBlockItem>;\\n};\\n```\\n\\n## isMeta\\n\\n```js\\nimport { isMeta } from 'markdown-react-code-preview-loader';\\n\\nisMeta('mdx:preview')         // => true\\nisMeta('mdx:preview:demo12')  // => true\\nisMeta('mdx:preview--demo12') // => false\\n```\\n\\n## getMetaId\\n\\n```js\\nimport { getMetaId } from 'markdown-react-code-preview-loader';\\n\\ngetMetaId('mdx:preview')        // => ''\\ngetMetaId('mdx:preview:demo12') // => 'demo12'\\n```\\n\\n## getCodeBlock \\n\\n```ts\\nconst getCodeBlock: (child: MarkdownParseData['children'], opts?: Options) => CodeBlockData['data'];\\n```\\n\\n## getURLParameters\\n\\n```js\\nimport { getURLParameters } from 'markdown-react-code-preview-loader';\\n\\ngetURLParameters('name=Adam&surname=Smith')  // => { name: 'Adam', surname: \\\"Smith\\\" }\\ngetURLParameters('mdx:preview:demo12')       // => { }\\ngetURLParameters('mdx:preview:demo12&name=Adam&surname=Smith')  // => { name: 'Adam', surname: \\\"Smith\\\" }\\ngetURLParameters('mdx:preview:demo12&code=true&boreder=0')      // => { code: 'true', boreder: \\\"0\\\" }\\n```\\n\\n```markdown\\n\\\\```tsx mdx:preview:demo12&code=true&boreder=0\\nimport React from \\\"react\\\"\\nconst Demo = ()=>{\\n  return <div>测试</div>\\n}\\n\\nexport default Demo\\n\\\\```\\n```\\n\\n```js\\n{\\n  data: {\\n    demo12: {\\n      code: \\\"\\\\\\\"use strict\\\\\\\";\\\\n\\\\nfunction ......\\\"\\n      language: \\\"jsx\\\"\\n      name: 'demo12',\\n      meta: { code: 'true', boreder: '0' },\\n      value: \\\"impo.....\\\"\\n    }\\n  },\\n  components: { demo12: ƒ },\\n  source: \\\"# Alert 确认对话框....\\\"\\n}\\n```\\n\\n## 配置 meta 标识\\n\\n注意 ⚠️：需要在代码块示例中添加特殊的 `meta` 标识，`loader` 才会去索引对于的 `react` 示例，进行代码转换。\\n\\n```\\n    Meta Tag         Meta ID   Meta Param\\n    ┈┈┈┈┈┈┈┈         ┈┈┈┈┈┈┈   ┈┈┈┈┈┈┈┈┈┈\\n╭┈┈┈┈┈┈┈┈━╲━━━━━━━━━━━━╱━━━━━━━╱━━━━━┈┈┈┈╮\\n┆ ```jsx mdx:preview:demo12&boreder=0    ┆\\n┆ import React from \\\"react\\\"              ┆\\n┆ const Demo = () => <div>Test</div>     ┆\\n┆ export default Demo                    ┆\\n┆ ```                                    ┆\\n╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯\\n```\\n\\n1. `mdx:` 特殊标识前缀\\n2. `mdx:preview` 控制是否进行进行示例索引，通过对应所在行号，获取需要的示例对象。\\n3. `mdx:preview:demo12` 通过 `demo12` 唯一标识，准确获取索引的 `示例代码` 或 `示例组件对象`。\\n4. `mdx:preview:&code=true&border=0` 传递参数，提供给渲染层使用。\\n\\n```markdown\\n\\\\```tsx mdx:preview\\nimport React from \\\"react\\\"\\nconst Demo = ()=>{\\n  return <div>测试</div>\\n}\\n\\nexport default Demo\\n\\\\```\\n```\\n\\n```markdown\\n\\\\```tsx mdx:preview:demo12\\nimport React from \\\"react\\\"\\nconst Demo = ()=>{\\n  return <div>测试</div>\\n}\\n\\nexport default Demo\\n\\\\```\\n```\\n\\n```markdown\\n\\\\```tsx mdx:preview:demo12&code=true&boreder=0\\nimport React from \\\"react\\\"\\nconst Demo = ()=>{\\n  return <div>测试</div>\\n}\\n\\nexport default Demo\\n\\\\```\\n```\\n\\n## 开发\\n\\n```bash\\nnpm install   # Install dependencies\\nnpm install --workspaces # Install sub packages dependencies\\n\\nnpm run watch\\nnpm run start\\n```\\n\\n## 贡献者\\n\\n一如既往，感谢我们出色的贡献者！\\n\\n<a href=\\\"https://github.com/kktjs/markdown-react-code-preview-loader/graphs/contributors\\\">\\n  <img src=\\\"https://kktjs.github.io/markdown-react-code-preview-loader/CONTRIBUTORS.svg\\\" />\\n</a>\\n\\n由 [action-contributors](https://github.com/jaywcjlove/github-action-contributors) 生成。\\n\\n### License\\n\\nLicensed under the MIT License.\"\n  }"],"names":["components","data","source"],"sourceRoot":""}