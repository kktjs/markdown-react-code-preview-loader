{"version":3,"file":"static/js/844.d61013c7.chunk.js","mappings":"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","sources":["pages/example/App.md"],"sourcesContent":["\n    function BaseCode363(){\n\"use strict\";\n\nfunction _instanceof(left, right) { if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) { return !!right[Symbol.hasInstance](left); } else { return left instanceof right; } }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\nvar _uiw = require(\"uiw\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!_instanceof(instance, Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Demo = /*#__PURE__*/function (_React$Component) {\n  _inherits(Demo, _React$Component);\n\n  var _super = _createSuper(Demo);\n\n  function Demo() {\n    var _this;\n\n    _classCallCheck(this, Demo);\n\n    _this = _super.call(this);\n    _this.state = {\n      visible: false\n    };\n    return _this;\n  }\n\n  _createClass(Demo, [{\n    key: \"onClick\",\n    value: function onClick(type) {\n      this.setState({\n        visible: !this.state.visible\n      });\n    }\n  }, {\n    key: \"onClosed\",\n    value: function onClosed(type) {\n      this.setState({\n        visible: false\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_react[\"default\"].createElement(\"div\", null, /*#__PURE__*/_react[\"default\"].createElement(_uiw.Alert, {\n        isOpen: this.state.visible,\n        type: \"danger\",\n        useButton: false,\n        maskClosable: true,\n        onClose: this.onClosed.bind(this) // onClosed={this.onClosed.bind(this)}\n        ,\n        content: \"\\u8FD9\\u4E2A\\u5BF9\\u8BDD\\u6846\\u53EA\\u6709\\u4E24\\u4E2A\\u4E2A\\u6309\\u94AE\\uFF0C\\u5355\\u51FB\\u201C\\u786E\\u5B9A\\u6309\\u94AE\\u201D\\u540E\\uFF0C\\u6B64\\u5BF9\\u8BDD\\u6846\\u5C06\\u5173\\u95ED\\u3002\\u7528\\u4F5C\\u901A\\u77E5\\u7528\\u6237\\u91CD\\u8981\\u4FE1\\u606F\\u3002\"\n      }, \"\\u8FD9\\u4E2A\\u5BF9\\u8BDD\\u6846\\u6709\\u4E24\\u4E2A\\u6309\\u94AE\\uFF0C\\u5355\\u51FB \\u201C\", /*#__PURE__*/_react[\"default\"].createElement(\"b\", null, \"\\u786E\\u5B9A\\u6309\\u94AE\"), \"\\u201D \\u6216 \\u201C\", /*#__PURE__*/_react[\"default\"].createElement(\"b\", null, \"\\u53D6\\u6D88\\u6309\\u94AE\"), \"\\u201D \\u540E\\uFF0C\\u6B64\\u5BF9\\u8BDD\\u6846\\u5C06\\u5173\\u95ED\\uFF0C\\u5C06\\u4E0D\\u89E6\\u53D1 \\u201C\", /*#__PURE__*/_react[\"default\"].createElement(\"del\", null, \"onConfirm\"), \"\\u201D \\u6216 \\u201C\", /*#__PURE__*/_react[\"default\"].createElement(\"del\", null, \"onCancel\"), \"\\u201D \\u4E8B\\u4EF6\\u3002\\u56E0\\u4E3A\\u8FD9\\u4FE9\\u6309\\u94AE\\u662F\\u81EA\\u5B9A\\u4E49\\u6309\\u94AE\\u3002\", /*#__PURE__*/_react[\"default\"].createElement(\"br\", null), /*#__PURE__*/_react[\"default\"].createElement(\"br\", null), /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n        className: \"w-alert-footer\"\n      }, /*#__PURE__*/_react[\"default\"].createElement(_uiw.Button, {\n        type: \"danger\",\n        onClick: this.onClosed.bind(this)\n      }, \"\\u786E\\u5B9A\\u6309\\u94AE\"), /*#__PURE__*/_react[\"default\"].createElement(_uiw.Button, {\n        onClick: this.onClosed.bind(this)\n      }, \"\\u53D6\\u6D88\\u6309\\u94AE\"))), /*#__PURE__*/_react[\"default\"].createElement(_uiw.ButtonGroup, null, /*#__PURE__*/_react[\"default\"].createElement(_uiw.Button, {\n        onClick: this.onClick.bind(this)\n      }, \"\\u5355\\u4E2A\\u6309\\u94AE\\u786E\\u8BA4\\u5BF9\\u8BDD\\u6846\")));\n    }\n  }]);\n\n  return Demo;\n}(_react[\"default\"].Component);\n\nvar _default = Demo;\n return _react[\"default\"].createElement(_default)\n};;\n const languages={base23:`jsx`,\n};\n const codeBlock={base23:\"import React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom\\\";\\nimport { Alert, ButtonGroup, Button } from \\\"uiw\\\";\\n\\nclass Demo extends React.Component {\\n  constructor() {\\n    super();\\n    this.state = {\\n      visible: false,\\n    };\\n  }\\n  onClick(type) {\\n    this.setState({ visible: !this.state.visible });\\n  }\\n  onClosed(type) {\\n    this.setState({ visible: false });\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <Alert\\n          isOpen={this.state.visible}\\n          type=\\\"danger\\\"\\n          useButton={false}\\n          maskClosable={true}\\n          onClose={this.onClosed.bind(this)}\\n          // onClosed={this.onClosed.bind(this)}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        >\\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>”\\n          后，此对话框将关闭，将不触发 “<del>onConfirm</del>” 或 “\\n          <del>onCancel</del>” 事件。因为这俩按钮是自定义按钮。\\n          <br />\\n          <br />\\n          <div className=\\\"w-alert-footer\\\">\\n            <Button type=\\\"danger\\\" onClick={this.onClosed.bind(this)}>\\n              确定按钮\\n            </Button>\\n            <Button onClick={this.onClosed.bind(this)}>取消按钮</Button>\\n          </div>\\n        </Alert>\\n        <ButtonGroup>\\n          <Button onClick={this.onClick.bind(this)}>单个按钮确认对话框</Button>\\n        </ButtonGroup>\\n      </div>\\n    );\\n  }\\n}\\nexport default Demo;\",\n};\n const components={base23:BaseCode363,\n}\n    export default {\n      source:\"# Alert Confirmation dialog box\\n\\n[![Open in unpkg](https://img.shields.io/badge/Open%20in-unpkg-blue)](https://uiwjs.github.io/npm-unpkg/#/pkg/@uiw/react-alert/file/README.md)\\n[![NPM Downloads](https://img.shields.io/npm/dm/@uiw/react-alert.svg?style=flat)](https://www.npmjs.com/package/@uiw/react-alert)\\n[![npm version](https://img.shields.io/npm/v/@uiw/react-alert.svg?label=@uiw/react-alert)](https://npmjs.com/@uiw/react-alert)\\n\\nThe pop-up dialog box will notify the user of important information before continuing, and click OK to close the dialog box asynchronously.\\n\\n```js\\nimport { Alert } from \\\"uiw\\\";\\n// or\\nimport Alert from \\\"@uiw/react-alert\\\";\\n```\\n\\n## Basic Usage\\n\\n```jsx mdx:preview\\nimport React,{ \\n  useState,\\n  useEffect,\\n} from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom\\\";\\nimport { Alert, ButtonGroup, Button } from \\\"uiw\\\";\\n\\nclass Demo extends React.Component {\\n  constructor() {\\n    super();\\n    this.state = {\\n      visible1: false,\\n      visible2: false,\\n    };\\n  }\\n  onClick(type) {\\n    this.setState({ [type]: !this.state[type] });\\n  }\\n  onClosed(type) {\\n    this.setState({ [type]: false });\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <Alert\\n          isOpen={this.state.visible1}\\n          confirmText=\\\"确定按钮\\\"\\n          onClosed={this.onClosed.bind(this, \\\"visible1\\\")}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          isOpen={this.state.visible2}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          type=\\\"danger\\\"\\n          onConfirm={() => console.log(\\\"您点击了确定按钮！\\\")}\\n          onCancel={() => console.log(\\\"您点击了取消按钮！\\\")}\\n          onClosed={this.onClosed.bind(this, \\\"visible2\\\")}\\n        >\\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>”\\n          后，此对话框将关闭，触发 “<b>onConfirm</b>” 或 “<b>onCancel</b>”\\n          事件。用作通知用户重要信息。\\n        </Alert>\\n        <ButtonGroup>\\n          <Button onClick={this.onClick.bind(this, \\\"visible1\\\")}>\\n            {`单个按钮确认对话框`}\\n          </Button>\\n          <Button onClick={this.onClick.bind(this, \\\"visible2\\\")}>\\n            确认对话框\\n          </Button>\\n        </ButtonGroup>\\n      </div>\\n    );\\n  }\\n}\\nexport default Demo;\\n```\\n\\n## Delay closing dialog\\n\\nHere is to use `Promise` to close the window after its execution is completed\\n\\n```jsx mdx:preview\\nimport React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom\\\";\\nimport { Alert, Button } from \\\"uiw\\\";\\n\\nclass Demo extends React.Component {\\n  constructor() {\\n    super();\\n    this.state = {\\n      visible: false,\\n    };\\n  }\\n  onClick() {\\n    this.setState({ visible: !this.statevisible });\\n  }\\n  onClosed() {\\n    this.setState({ visible: false });\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <Alert\\n          icon=\\\"delete\\\"\\n          isOpen={this.state.visible}\\n          confirmText=\\\"确定按钮\\\"\\n          type=\\\"danger\\\"\\n          onConfirm={() => {\\n            console.log(\\\"确定回调！, 这里是利用Promise等执行完成再去关闭窗口\\\");\\n            return new Promise((resolve, reject) => {\\n              const random = Math.random();\\n              console.log(\\n                \\\"测试，随机值大于 0.5 执行 resolve 事件，否则 执行 reject 触发 catch 错误\\\",\\n                random,\\n                random > 0.5\\n              );\\n              setTimeout(random > 0.5 ? resolve : reject, 3000);\\n            }).catch(() => {\\n              // 可以通过下面方式，阻止弹框消失\\n              // throw new Error();\\n            });\\n          }}\\n          onClosed={this.onClosed.bind(this, \\\"visible\\\")}\\n        >\\n          这里是利用 <b>Promise</b>{\\\" \\\"}\\n          的特性，等它执行完成后，再去关闭窗口，达到延迟关闭的效果。\\n          <br />\\n          <br />\\n          这个测试例子，生成随机值判断是否大于 <b>0.5</b> 执行 <b>resolve</b> 事件，否则\\n          执行 <b>reject</b> 触发 <b>catch</b> 错误。\\n        </Alert>\\n        <Button onClick={this.onClick.bind(this, \\\"visible\\\")}>\\n          延迟关闭对话框\\n        </Button>\\n      </div>\\n    );\\n  }\\n}\\nexport default Demo;\\n```\\n\\n## Pop up box with Icon\\n\\nSet the pop-up dialog box with status by setting the `icon` and `type` parameters.\\n\\n```jsx mdx:preview\\nimport React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom\\\";\\nimport { Alert, ButtonGroup, Button } from \\\"uiw\\\";\\n\\nclass Demo extends React.Component {\\n  constructor() {\\n    super();\\n    this.state = {\\n      visible1: false,\\n      visible2: false,\\n    };\\n  }\\n  onClick(type) {\\n    this.setState({ [type]: !this.state[type] });\\n  }\\n  onClosed(type) {\\n    this.setState({ [type]: false });\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <Alert\\n          isOpen={this.state.visible1}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          icon=\\\"information\\\"\\n          type=\\\"primary\\\"\\n          onClosed={this.onClosed.bind(this, \\\"visible1\\\")}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          isOpen={this.state.visible2}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          icon=\\\"circle-check\\\"\\n          type=\\\"success\\\"\\n          onClosed={this.onClosed.bind(this, \\\"visible2\\\")}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          isOpen={this.state.visible3}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          icon=\\\"warning\\\"\\n          type=\\\"warning\\\"\\n          onClosed={this.onClosed.bind(this, \\\"visible3\\\")}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          isOpen={this.state.visible4}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          icon=\\\"circle-close\\\"\\n          type=\\\"danger\\\"\\n          onClosed={this.onClosed.bind(this, \\\"visible4\\\")}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          isOpen={this.state.visible5}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          type=\\\"light\\\"\\n          onClosed={this.onClosed.bind(this, \\\"visible5\\\")}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          isOpen={this.state.visible6}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          type=\\\"dark\\\"\\n          onClosed={this.onClosed.bind(this, \\\"visible6\\\")}\\n        >\\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>”\\n          后，此对话框将关闭，触发 “<b>onConfirm</b>” 或 “<b>onCancel</b>”\\n          事件。用作通知用户重要信息。\\n        </Alert>\\n        <ButtonGroup>\\n          <Button onClick={this.onClick.bind(this, \\\"visible1\\\")} type=\\\"primary\\\">\\n            主要\\n          </Button>\\n          <Button onClick={this.onClick.bind(this, \\\"visible2\\\")} type=\\\"success\\\">\\n            成功\\n          </Button>\\n          <Button onClick={this.onClick.bind(this, \\\"visible3\\\")} type=\\\"warning\\\">\\n            警告\\n          </Button>\\n          <Button onClick={this.onClick.bind(this, \\\"visible4\\\")} type=\\\"danger\\\">\\n            错误\\n          </Button>\\n          <Button onClick={this.onClick.bind(this, \\\"visible5\\\")} type=\\\"light\\\">\\n            亮按钮\\n          </Button>\\n          <Button onClick={this.onClick.bind(this, \\\"visible6\\\")} type=\\\"dark\\\">\\n            暗按钮\\n          </Button>\\n        </ButtonGroup>\\n      </div>\\n    );\\n  }\\n}\\nexport default Demo;\\n```\\n\\n## Pop up box with title\\n\\n```jsx mdx:preview\\nimport React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom\\\";\\nimport { Alert, ButtonGroup, Button } from \\\"uiw\\\";\\n\\nclass Demo extends React.Component {\\n  constructor() {\\n    super();\\n    this.state = {\\n      visible1: false,\\n      visible2: false,\\n    };\\n  }\\n  onClick(type) {\\n    this.setState({ [type]: !this.state[type] });\\n  }\\n  onClosed(type) {\\n    this.setState({ [type]: false });\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <Alert\\n          title=\\\"带标题的弹出框\\\"\\n          isOpen={this.state.visible1}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          icon=\\\"information\\\"\\n          type=\\\"primary\\\"\\n          onClosed={this.onClosed.bind(this, \\\"visible1\\\")}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          title=\\\"带标题的弹出框\\\"\\n          isOpen={this.state.visible2}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          type=\\\"success\\\"\\n          onClosed={this.onClosed.bind(this, \\\"visible2\\\")}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          title=\\\"带标题的弹出框\\\"\\n          isOpen={this.state.visible3}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          icon=\\\"warning\\\"\\n          type=\\\"warning\\\"\\n          onClosed={this.onClosed.bind(this, \\\"visible3\\\")}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          title=\\\"带标题的弹出框\\\"\\n          isOpen={this.state.visible4}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          icon=\\\"circle-close\\\"\\n          type=\\\"danger\\\"\\n          onClosed={this.onClosed.bind(this, \\\"visible4\\\")}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          title=\\\"带标题的弹出框\\\"\\n          isOpen={this.state.visible5}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          type=\\\"light\\\"\\n          onClosed={this.onClosed.bind(this, \\\"visible5\\\")}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          title=\\\"带标题的弹出框\\\"\\n          isOpen={this.state.visible6}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          type=\\\"dark\\\"\\n          onClosed={this.onClosed.bind(this, \\\"visible6\\\")}\\n        >\\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>”\\n          后，此对话框将关闭，触发 “<b>onConfirm</b>” 或 “<b>onCancel</b>”\\n          事件。用作通知用户重要信息。\\n        </Alert>\\n        <ButtonGroup>\\n          <Button onClick={this.onClick.bind(this, \\\"visible1\\\")} type=\\\"primary\\\">\\n            主要\\n          </Button>\\n          <Button onClick={this.onClick.bind(this, \\\"visible2\\\")} type=\\\"success\\\">\\n            成功\\n          </Button>\\n          <Button onClick={this.onClick.bind(this, \\\"visible3\\\")} type=\\\"warning\\\">\\n            警告\\n          </Button>\\n          <Button onClick={this.onClick.bind(this, \\\"visible4\\\")} type=\\\"danger\\\">\\n            错误\\n          </Button>\\n          <Button onClick={this.onClick.bind(this, \\\"visible5\\\")} type=\\\"light\\\">\\n            亮按钮\\n          </Button>\\n          <Button onClick={this.onClick.bind(this, \\\"visible6\\\")} type=\\\"dark\\\">\\n            暗按钮\\n          </Button>\\n        </ButtonGroup>\\n      </div>\\n    );\\n  }\\n}\\nexport default Demo;\\n```\\n\\n### Custom button\\n\\nThere are two buttons in this dialog box. After clicking **OK button** or **cancel button**, this dialog box will close and the ~~`onconfirm`~~ or ~~`OnCancel`~~ event will not be triggered. Because these two buttons are custom buttons. You can define `classname = \\\"w-alert-footer\\\"` for the object outside the custom button, and the default style will be displayed.\\n\\n```jsx mdx:preview:base23\\nimport React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom\\\";\\nimport { Alert, ButtonGroup, Button } from \\\"uiw\\\";\\n\\nclass Demo extends React.Component {\\n  constructor() {\\n    super();\\n    this.state = {\\n      visible: false,\\n    };\\n  }\\n  onClick(type) {\\n    this.setState({ visible: !this.state.visible });\\n  }\\n  onClosed(type) {\\n    this.setState({ visible: false });\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <Alert\\n          isOpen={this.state.visible}\\n          type=\\\"danger\\\"\\n          useButton={false}\\n          maskClosable={true}\\n          onClose={this.onClosed.bind(this)}\\n          // onClosed={this.onClosed.bind(this)}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        >\\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>”\\n          后，此对话框将关闭，将不触发 “<del>onConfirm</del>” 或 “\\n          <del>onCancel</del>” 事件。因为这俩按钮是自定义按钮。\\n          <br />\\n          <br />\\n          <div className=\\\"w-alert-footer\\\">\\n            <Button type=\\\"danger\\\" onClick={this.onClosed.bind(this)}>\\n              确定按钮\\n            </Button>\\n            <Button onClick={this.onClosed.bind(this)}>取消按钮</Button>\\n          </div>\\n        </Alert>\\n        <ButtonGroup>\\n          <Button onClick={this.onClick.bind(this)}>单个按钮确认对话框</Button>\\n        </ButtonGroup>\\n      </div>\\n    );\\n  }\\n}\\nexport default Demo;\\n```\\n\\n### Mask layers are not displayed\\n\\n```jsx mdx:preview\\nimport React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom\\\";\\nimport { Alert, ButtonGroup, Button } from \\\"uiw\\\";\\n\\nclass Demo extends React.Component {\\n  constructor() {\\n    super();\\n    this.state = {\\n      visible: false,\\n    };\\n  }\\n  onClick(type) {\\n    this.setState({ visible: !this.state.visible });\\n  }\\n  onClosed(type) {\\n    this.setState({ visible: false });\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <Alert\\n          isOpen={this.state.visible}\\n          type=\\\"danger\\\"\\n          maskClosable={true}\\n          hasBackdrop={false}\\n          onClose={this.onClosed.bind(this)}\\n          onClosed={this.onClosed.bind(this)}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        >\\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>”\\n          后，此对话框将关闭，将不触发 “<del>onConfirm</del>” 或 “\\n          <del>onCancel</del>” 事件。因为这俩按钮是自定义按钮。\\n        </Alert>\\n        <ButtonGroup>\\n          <Button onClick={this.onClick.bind(this)}>单个按钮确认对话框</Button>\\n        </ButtonGroup>\\n      </div>\\n    );\\n  }\\n}\\nexport default Demo;\\n```\\n\\n## Props\\n\\nAlthough similar to `<Modal>`, `<Alert>` is more restrictive and applies only to important information. This component inherits the properties of [`<Modal>`](#/components/modal), so some parameters can refer to the `<Modal>` component.\\n| parameter       | explain       | type             | Default value  |\\n| ------------------------------------------- | ----- | ---------------- | ------- |\\n| onCancel                                    | Callback function of cancel button | Function(e)      | -       |\\n| onConfirm                                   | Click OK to call back | Function(e)      | -       |\\n| cancelText                                  | Cancel button text,    | String           | -       |\\n| confirmText                                 | Confirm button text      | String           | `确认`  |\\n| type                                        | The button type is consistent with the `type` parameter of the `<Button>` component and will affect the button color.| String           | `light` |\\n| icon[`<Modal>`](#/components/modal)         | Set the icon in the upper right corner of the dialog box. Set `type` to set the icon to a different color. The current attribute is the `type` attribute of [`<Icon>`](#/components/icon) component, so you can refer to the custom icon of the component. | String/ReactNode | -       |\\n| title[`<Modal>`](#/components/modal)        | Set title                                                 | Function(e)      | -       |\\n| useButton[`<Modal>`](#/components/modal)    | Whether to use the default button. If you set `false`, you need to customize the button to close    | Boolean          | `true`  |\\n| isOpen[`<Modal>`](#/components/modal)       | Whether the dialog box is visible      | Boolean          | `false` |\\n| maskClosable[`<Modal>`](#/components/modal) | Click whether the mask layer is allowed to be turned off  | boolean          | `true`  |\\n\\nFor more attribute documents, please refer to [Modal](#/components/modal)。\\n\",\n      components,\n      codeBlock,\n      languages\n    }\n"],"names":["languages","base23","components","_typeof","obj","Symbol","iterator","constructor","prototype","_react","_interopRequireDefault","_uiw","__esModule","_classCallCheck","instance","Constructor","left","right","hasInstance","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_setPrototypeOf","o","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","valueOf","call","e","_isNativeReflectConstruct","result","Super","_getPrototypeOf","NewTarget","this","arguments","apply","_possibleConstructorReturn","self","ReferenceError","_assertThisInitialized","getPrototypeOf","_default","_React$Component","subClass","superClass","create","value","_inherits","Demo","protoProps","staticProps","_super","_this","state","visible","type","setState","createElement","Alert","isOpen","useButton","maskClosable","onClose","onClosed","bind","content","className","Button","onClick","ButtonGroup","Component","source","codeBlock"],"sourceRoot":""}